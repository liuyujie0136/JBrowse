{"version":3,"file":"static/js/8752.b9ba729f.chunk.js","mappings":"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","sources":["../../../plugins/data-management/src/AddTrackWidget/components/ConfirmTrack.tsx","../../../plugins/data-management/src/AddTrackWidget/components/TrackSourceSelect.tsx","../../../plugins/data-management/src/AddTrackWidget/components/AddTrackWidget.tsx"],"sourcesContent":["import React from 'react'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { getSession } from '@jbrowse/core/util'\nimport {\n  Link,\n  MenuItem,\n  TextField,\n  ListSubheader,\n  Typography,\n  makeStyles,\n} from '@material-ui/core'\nimport PluginManager from '@jbrowse/core/PluginManager'\nimport { observer } from 'mobx-react'\nimport { getEnv } from 'mobx-state-tree'\nimport { UNKNOWN } from '@jbrowse/core/util/tracks'\n\n// locals\nimport { AddTrackModel } from '../model'\nimport { AdapterMetadata } from '@jbrowse/core/pluggableElementTypes/AdapterType'\n\nconst useStyles = makeStyles(theme => ({\n  spacing: {\n    marginBottom: theme.spacing(3),\n  },\n}))\n\nfunction StatusMessage({\n  trackAdapter,\n  trackType,\n}: {\n  trackAdapter: { type: string; subadapter?: { type: string } }\n  trackType: string\n}) {\n  const classes = useStyles()\n  return trackAdapter.type === 'SNPCoverageAdapter' ? (\n    <Typography className={classes.spacing}>\n      Selected <code>{trackType}</code>. Using adapter{' '}\n      <code>{trackAdapter.type}</code> with subadapter{' '}\n      <code>{trackAdapter.subadapter?.type}</code>. Please enter a track name\n      and, if necessary, update the track type.\n    </Typography>\n  ) : (\n    <Typography className={classes.spacing}>\n      Using adapter <code>{trackAdapter.type}</code> and guessing track type{' '}\n      <code>{trackType}</code>. Please enter a track name and, if necessary,\n      update the track type.\n    </Typography>\n  )\n}\n\n/**\n * categorizeAdapters takes a list of adapters and sorts their menu item elements under an appropriate ListSubheader\n *  element. In this way, adapters that are from external plugins can have headers that differentiate them from the\n *  out-of-the-box plugins.\n * @param adaptersList - a list of adapters found in the PluginManager\n * @returns a series of JSX elements that are ListSubheaders followed by the adapters\n *   found under that subheader\n */\nfunction categorizeAdapters(\n  adaptersList: { name: string; adapterMetadata: AdapterMetadata }[],\n) {\n  let currentCategory = ''\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const items: any = []\n  adaptersList.forEach(adapter => {\n    if (adapter.adapterMetadata?.category) {\n      if (currentCategory !== adapter.adapterMetadata?.category) {\n        currentCategory = adapter.adapterMetadata?.category\n        items.push(\n          <ListSubheader\n            key={adapter.adapterMetadata?.category}\n            value={adapter.adapterMetadata?.category}\n          >\n            {adapter.adapterMetadata?.category}\n          </ListSubheader>,\n        )\n      }\n      items.push(\n        <MenuItem key={adapter.name} value={adapter.name}>\n          {adapter.adapterMetadata?.displayName\n            ? adapter.adapterMetadata?.displayName\n            : adapter.name}\n        </MenuItem>,\n      )\n    }\n  })\n  return items\n}\n\nfunction getAdapterTypes(pluginManager: PluginManager) {\n  return pluginManager.getElementTypesInGroup('adapter') as {\n    name: string\n    adapterMetadata: AdapterMetadata\n  }[]\n}\n\nfunction getTrackTypes(pluginManager: PluginManager) {\n  return pluginManager.getElementTypesInGroup('track') as { name: string }[]\n}\n\nconst TrackAdapterSelector = observer(({ model }: { model: AddTrackModel }) => {\n  const classes = useStyles()\n  const session = getSession(model)\n  const { trackAdapter } = model\n  // prettier-ignore\n  const adapters = getAdapterTypes(getEnv(session).pluginManager)\n  return (\n    <TextField\n      className={classes.spacing}\n      value={trackAdapter?.type !== 'UNKNOWN' ? trackAdapter?.type : ''}\n      label=\"adapterType\"\n      helperText=\"Select an adapter type\"\n      select\n      fullWidth\n      onChange={event => {\n        model.setAdapterHint(event.target.value)\n      }}\n      SelectProps={{\n        // @ts-ignore\n        SelectDisplayProps: { 'data-testid': 'adapterTypeSelect' },\n      }}\n    >\n      {adapters\n        // Excludes any adapter with the 'adapterMetadata.hiddenFromGUI' property, and anything with the 'adapterMetadata.category' property\n        .filter(\n          elt =>\n            !elt.adapterMetadata?.hiddenFromGUI &&\n            !elt.adapterMetadata?.category,\n        )\n        .map(elt => (\n          <MenuItem key={elt.name} value={elt.name}>\n            {elt.adapterMetadata?.displayName\n              ? elt.adapterMetadata?.displayName\n              : elt.name}\n          </MenuItem>\n        ))}\n      {/* adapters with the 'adapterMetadata.category' property are categorized by the value of the property here */}\n      {categorizeAdapters(\n        adapters.filter(elt => !elt.adapterMetadata?.hiddenFromGUI),\n      )}\n    </TextField>\n  )\n})\n\nfunction UnknownAdapterPrompt({ model }: { model: AddTrackModel }) {\n  const classes = useStyles()\n  return (\n    <>\n      <Typography className={classes.spacing}>\n        JBrowse was not able to guess the adapter type for this data, but it may\n        be in the list below. If not, you can{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/releases\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          check for new releases\n        </Link>{' '}\n        of JBrowse to see if they support this data type or{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/issues/new\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          file an issue\n        </Link>{' '}\n        and add a feature request for this data type.\n      </Typography>\n      <TrackAdapterSelector model={model} />\n    </>\n  )\n}\n\nconst TrackTypeSelector = observer(({ model }: { model: AddTrackModel }) => {\n  const classes = useStyles()\n  const session = getSession(model)\n  const { trackType } = model\n  const trackTypes = getTrackTypes(getEnv(session).pluginManager)\n\n  return (\n    <TextField\n      className={classes.spacing}\n      value={trackType}\n      label=\"trackType\"\n      helperText=\"Select a track type\"\n      select\n      fullWidth\n      onChange={event => {\n        model.setTrackType(event.target.value)\n      }}\n      SelectProps={{\n        // @ts-ignore\n        SelectDisplayProps: { 'data-testid': 'trackTypeSelect' },\n      }}\n    >\n      {trackTypes.map(({ name }) => (\n        <MenuItem key={name} value={name}>\n          {name}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n})\n\nconst TrackAssemblySelector = observer(\n  ({ model }: { model: AddTrackModel }) => {\n    const session = getSession(model)\n    const { assembly } = model\n    return (\n      <TextField\n        value={assembly}\n        label=\"assemblyName\"\n        helperText=\"Assembly to which the track will be added\"\n        select\n        fullWidth\n        onChange={event => model.setAssembly(event.target.value)}\n        SelectProps={{\n          // @ts-ignore\n          SelectDisplayProps: { 'data-testid': 'assemblyNameSelect' },\n        }}\n      >\n        {session.assemblies\n          .map(conf => readConfObject(conf, 'name'))\n          .map(name => (\n            <MenuItem key={name} value={name}>\n              {name}\n            </MenuItem>\n          ))}\n      </TextField>\n    )\n  },\n)\n\nfunction ConfirmTrack({ model }: { model: AddTrackModel }) {\n  const classes = useStyles()\n  const { trackName, trackAdapter, trackType, warningMessage, adapterHint } =\n    model\n\n  if (model.unsupported) {\n    return (\n      <Typography className={classes.spacing}>\n        This version of JBrowse cannot display data of this type. It is\n        possible, however, that there is a newer version that can display them.\n        You can{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/releases\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          check for new releases\n        </Link>{' '}\n        of JBrowse or{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/issues/new\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          file an issue\n        </Link>{' '}\n        and add a feature request for this data type.\n      </Typography>\n    )\n  }\n  if (trackAdapter?.type === UNKNOWN) {\n    return <UnknownAdapterPrompt model={model} />\n  }\n\n  if (adapterHint === '' && trackAdapter) {\n    model.setAdapterHint(trackAdapter.type)\n  }\n\n  if (!trackAdapter?.type) {\n    return <Typography>Could not recognize this data type.</Typography>\n  }\n\n  return (\n    <div>\n      {trackAdapter ? (\n        <StatusMessage trackAdapter={trackAdapter} trackType={trackType} />\n      ) : null}\n      {warningMessage ? (\n        <Typography style={{ color: 'orange' }}>{warningMessage}</Typography>\n      ) : null}\n      <TextField\n        className={classes.spacing}\n        label=\"trackName\"\n        helperText=\"A name for this track\"\n        fullWidth\n        value={trackName}\n        onChange={event => model.setTrackName(event.target.value)}\n        inputProps={{ 'data-testid': 'trackNameInput' }}\n      />\n      <TrackAdapterSelector model={model} />\n      <TrackTypeSelector model={model} />\n      <TrackAssemblySelector model={model} />\n    </div>\n  )\n}\n\nexport default observer(ConfirmTrack)\n","import React from 'react'\nimport { FileSelector } from '@jbrowse/core/ui'\nimport { Paper, makeStyles } from '@material-ui/core'\nimport { AddTrackModel } from '../model'\nimport { getRoot } from 'mobx-state-tree'\nimport { observer } from 'mobx-react'\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    display: 'flex',\n    flexDirection: 'column',\n    padding: theme.spacing(1),\n  },\n  spacer: {\n    height: theme.spacing(8),\n  },\n}))\n\nfunction TrackSourceSelect({ model }: { model: AddTrackModel }) {\n  const classes = useStyles()\n  const rootModel = getRoot(model)\n\n  return (\n    <Paper className={classes.paper}>\n      <FileSelector\n        name=\"Main file\"\n        description=\"\"\n        location={model.trackData}\n        setLocation={model.setTrackData}\n        setName={model.setTrackName}\n        rootModel={rootModel}\n      />\n      <div className={classes.spacer} />\n      <FileSelector\n        name=\"Index file\"\n        description=\"(Optional) The URL of the index file is automatically inferred from the URL of the main file if it is not supplied.\"\n        location={model.indexTrackData}\n        setLocation={model.setIndexTrackData}\n        setName={model.setTrackName}\n        rootModel={rootModel}\n      />\n    </Paper>\n  )\n}\n\nexport default observer(TrackSourceSelect)\n","import React, { useState } from 'react'\nimport {\n  Button,\n  Step,\n  StepContent,\n  StepLabel,\n  Stepper,\n  Typography,\n  makeStyles,\n} from '@material-ui/core'\nimport { getSession } from '@jbrowse/core/util'\nimport { getConf } from '@jbrowse/core/configuration'\nimport { observer } from 'mobx-react'\nimport { Alert } from '@material-ui/lab'\n\n// locals\nimport ConfirmTrack from './ConfirmTrack'\nimport TrackSourceSelect from './TrackSourceSelect'\nimport { AddTrackModel } from '../model'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(1),\n  },\n  stepper: {\n    backgroundColor: theme.palette.background.default,\n  },\n  button: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  actionsContainer: {\n    marginBottom: theme.spacing(2),\n  },\n  stepContent: {\n    margin: theme.spacing(1),\n  },\n  alertContainer: {\n    padding: `${theme.spacing(2)}px 0px ${theme.spacing(2)}px 0px`,\n  },\n}))\n\nconst steps = ['Enter track data', 'Confirm track type']\n\nfunction AddTrackWidget({ model }: { model: AddTrackModel }) {\n  const [activeStep, setActiveStep] = useState(0)\n  const classes = useStyles()\n  const session = getSession(model)\n  const { assembly, trackAdapter, trackData, trackName, trackType } = model\n  const [trackErrorMessage, setTrackErrorMessage] = useState<string>()\n\n  function getStepContent(step: number) {\n    switch (step) {\n      case 0:\n        return <TrackSourceSelect model={model} />\n      case 1:\n        return <ConfirmTrack model={model} />\n      default:\n        return <Typography>Unknown step</Typography>\n    }\n  }\n\n  async function handleNext() {\n    if (activeStep !== steps.length - 1) {\n      setActiveStep(activeStep + 1)\n      return\n    }\n\n    const trackId = `${trackName\n      .toLowerCase()\n      .replace(/ /g, '_')}-${Date.now()}${\n      session.adminMode ? '' : '-sessionTrack'\n    }`\n\n    const assemblyInstance = session.assemblyManager.get(assembly)\n\n    if (trackAdapter && trackAdapter.type !== 'UNKNOWN') {\n      // @ts-ignore\n      session.addTrackConf({\n        trackId,\n        type: trackType,\n        name: trackName,\n        assemblyNames: [assembly],\n        adapter: {\n          ...trackAdapter,\n          sequenceAdapter: getConf(assemblyInstance, ['sequence', 'adapter']),\n        },\n      })\n      if (model.view) {\n        model.view.showTrack(trackId)\n      } else {\n        session.notify(\n          'Open a new view, or use the track selector in an existing view, to view this track',\n          'info',\n        )\n      }\n      model.clearData()\n      // @ts-ignore\n      session.hideWidget(model)\n    } else {\n      setTrackErrorMessage(\n        'Failed to add track.\\nThe configuration of this file is not currently supported.',\n      )\n    }\n  }\n\n  function handleBack() {\n    setTrackErrorMessage(undefined)\n    setActiveStep(activeStep - 1)\n  }\n\n  function isNextDisabled() {\n    switch (activeStep) {\n      case 0:\n        return !trackData\n      case 1:\n        return !(trackName && trackType && trackAdapter?.type && assembly)\n      default:\n        return true\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Stepper\n        className={classes.stepper}\n        activeStep={activeStep}\n        orientation=\"vertical\"\n      >\n        {steps.map((label, idx) => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n            <StepContent>\n              {getStepContent(idx)}\n              <div className={classes.actionsContainer}>\n                <Button\n                  disabled={activeStep === 0}\n                  onClick={handleBack}\n                  className={classes.button}\n                >\n                  Back\n                </Button>\n                <Button\n                  disabled={isNextDisabled()}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handleNext}\n                  className={classes.button}\n                  data-testid=\"addTrackNextButton\"\n                >\n                  {activeStep === steps.length - 1 ? 'Add' : 'Next'}\n                </Button>\n              </div>\n              {trackErrorMessage ? (\n                <div className={classes.alertContainer}>\n                  <Alert severity=\"error\">{trackErrorMessage}</Alert>\n                </div>\n              ) : null}\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n    </div>\n  )\n}\n\nexport default observer(AddTrackWidget)\n"],"names":["useStyles","makeStyles","theme","spacing","marginBottom","StatusMessage","trackAdapter","trackType","classes","type","Typography","className","subadapter","categorizeAdapters","adaptersList","currentCategory","items","forEach","adapter","adapterMetadata","category","push","ListSubheader","value","MenuItem","name","displayName","TrackAdapterSelector","observer","model","session","getSession","adapters","getEnv","pluginManager","getElementTypesInGroup","TextField","label","helperText","select","fullWidth","onChange","event","setAdapterHint","target","SelectProps","SelectDisplayProps","filter","elt","hiddenFromGUI","map","UnknownAdapterPrompt","Link","href","rel","TrackTypeSelector","trackTypes","setTrackType","TrackAssemblySelector","assembly","setAssembly","assemblies","conf","readConfObject","trackName","warningMessage","adapterHint","unsupported","UNKNOWN","style","color","setTrackName","inputProps","paper","display","flexDirection","padding","spacer","height","rootModel","getRoot","Paper","FileSelector","description","location","trackData","setLocation","setTrackData","setName","indexTrackData","setIndexTrackData","root","marginTop","stepper","backgroundColor","palette","background","default","button","marginRight","actionsContainer","stepContent","margin","alertContainer","steps","useState","activeStep","setActiveStep","trackErrorMessage","setTrackErrorMessage","getStepContent","step","handleNext","length","trackId","toLowerCase","replace","Date","now","adminMode","assemblyInstance","assemblyManager","get","addTrackConf","assemblyNames","sequenceAdapter","getConf","view","showTrack","notify","clearData","hideWidget","handleBack","undefined","isNextDisabled","Stepper","orientation","idx","Step","StepLabel","StepContent","Button","disabled","onClick","variant","Alert","severity"],"sourceRoot":""}